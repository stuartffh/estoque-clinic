# ==================================================
# ESTOQUE CLINIC - DOCKER COMPOSE COMPLETO
# Configuração para desenvolvimento e produção
# ==================================================

version: '3.8'

networks:
  estoque-clinic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_certs:
    driver: local

services:
  # ==========================================
  # BANCO DE DADOS POSTGRESQL
  # ==========================================
  postgres:
    image: postgres:16-alpine
    container_name: estoque-clinic-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-tematico}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      estoque-clinic-network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-tematico}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # ==========================================
  # CACHE REDIS
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: estoque-clinic-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      estoque-clinic-network:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # ==========================================
  # BACKEND API
  # ==========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: estoque-clinic-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-tematico}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-super-secure-jwt-secret-key-change-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secure-refresh-secret-key-change-in-production}
      
      # Security
      API_KEY: ${API_KEY:-your-api-key-change-in-production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:4200}
      
      # Features
      SWAGGER_ENABLED: ${SWAGGER_ENABLED:-true}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${API_PORT:-3001}:3001"
    volumes:
      - app_logs:/app/logs
      - ./backend/uploads:/app/uploads
    networks:
      estoque-clinic-network:
        ipv4_address: 172.20.0.20
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  # ==========================================
  # FRONTEND ANGULAR (NGINX)
  # ==========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: estoque-clinic-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT:-80}:80"
      - "${FRONTEND_SSL_PORT:-443}:443"
    volumes:
      - nginx_certs:/etc/nginx/certs:ro
    networks:
      estoque-clinic-network:
        ipv4_address: 172.20.0.30
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # ==========================================
  # NGINX REVERSE PROXY (PRODUÇÃO)
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: estoque-clinic-proxy
    restart: unless-stopped
    profiles: ["production"]
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_certs:/etc/nginx/certs:ro
      - app_logs:/var/log/nginx
    networks:
      estoque-clinic-network:
        ipv4_address: 172.20.0.40
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # ==========================================
  # MONITORAMENTO (DESENVOLVIMENTO)
  # ==========================================
  adminer:
    image: adminer:latest
    container_name: estoque-clinic-adminer
    restart: unless-stopped
    profiles: ["development"]
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: galkaev
    networks:
      estoque-clinic-network:
        ipv4_address: 172.20.0.50

  # Redis Commander para monitoramento do cache
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: estoque-clinic-redis-commander
    restart: unless-stopped
    profiles: ["development"]
    depends_on:
      - redis
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    networks:
      estoque-clinic-network:
        ipv4_address: 172.20.0.51